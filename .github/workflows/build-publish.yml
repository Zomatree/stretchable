name: Build and Publish Python Package

on:
  workflow_dispatch
  # release:
  #   types: [published]

permissions:
  contents: read

jobs:
  prepare:
    name: Get release version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      publish: ${{ steps.get-version.outputs.publish }}
    steps:
      - name: Get version from tag
        id: get-version
        run: |
          pattern='refs/tags/v([0-9]+\.[0-9]+\.[0-9]+)'
          if [[ "${{ github.ref }}" =~ $pattern ]]
          then
            ver="${BASH_REMATCH[1]}"
            pub="true"
          else
            ver=""
            pub="false"
          fi
          echo "version=$ver" >> "$GITHUB_OUTPUT"
          echo "publish=$pub" >> "$GITHUB_OUTPUT"

  build:
    name: Build packages
    needs: prepare
    strategy:
      matrix:
        platform:
          - os: windows-latest
            targets: x86 x64
          - os: macos-latest
            targets: x86_64-apple-darwin aarch64-apple-darwin
          - os: ubuntu-latest
            targets: x86_64 i686 aarch64 armv7 s90x ppc64le ppc64
            compat: auto
          - os: ubuntu-latest
            targets: x86_64-unknown-linux-musl i686-unknown-linux-musl aarch64-unknown-linux-musl armv7-unknown-linux-musleabihf
            compat: musllinux_1_2

    runs-on: ${{ matrix.platform.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "maturin>=1.1,<2.0" build
      - name: Update Cargo.toml version
        if: needs.prepare.outputs.publish == 'true'
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          $cargo = Get-Content "Cargo.toml"
          for ($i = 0; $i -lt $cargo.Length; $i++) { 
              if ($cargo[$i] -match '^version = "([0-9]+\.[0-9]+)"') {
                  $cargo[$i] = "version = ""$VERSION"""
                  break
              }
          }
          $cargo | Out-File -Force -Encoding "UTF8" -FilePath "Cargo.toml"
        shell: pwsh
      - name: Build packages
        run: |
          if ("${{ matrix.platform.compat }}") {
            $compat = "${{ matrix.platform.compat }}"
          } else {
            $compat = "off"
          }
          maturin pep517 write-sdist --sdist-directory dist/
          foreach ($target in "${{ matrix.platform.targets }}".Split(" ")) {
            rustup target add $target
            maturin pep517 build-wheel --release --compatibility $compat --target $target --out dist/
            # python -m build --config-setting build-args="'--target $target$compat'"
          }
        shell: pwsh
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  publish:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: needs.prepare.outputs.publish == 'true'
    environment: production
    permissions:
      id-token: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
